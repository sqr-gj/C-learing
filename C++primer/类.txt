数据抽象	接口实现分离	用户使用接口来使用类，不可知具体实现
数据成员
成员函数
在类外部定义成员函数时，函数名必须包含其所属类名	类名::函数名
1.构造函数
默认构造函数	class_name() = default;
初始化列表	class_name(...) : ... { }	//括号内为传入参数，: 后为数据成员赋值

委托构造函数 ：使用所属类的其他构造函数执行其初始化
class_name(...) : ... { }
class_name(......) : class_name(...) { }		将构造过程委托给第一个构造函数，参数列表需与第一个构造函数匹配

抑制构造函数隐式转换   explicit class_name()...  (仅在类内使用		explicit后只能使用直接初始化

2.析构函数

3.访问控制
public  定义接口，可以在整个程序被访问
private  隐藏实现，可被类成员函数访问

class定义时默认为private
struct定义时默认为public

4.友元
函数声明时在函数名前添加关键字  friend
友元不具备传递性	每个类控制自己的友元
类的友元函数必须也在类外部提供相应声明

5.类内部的成员函数处理过程为：先编译成员的声明	再处理成员函数的定义
所以函数定义中可以使用后面声明的成员

6.聚合类
----所有成员都是public、没有任何构造函数、没有类内初始值、没有基类

7.字面值常量类
constexpr   隐式const

8.类的静态成员
static	(仅在类内声明使用	
使该成员与类关联     而与类的对象无关
一般而言，不能在类内部初始化静态成员	在类外部定义初始化每个静态成员且只能被初始化一次	一旦定义，一直存在于程序的整个生命周期
可以使用静态成员作为默认实参

9.拷贝控制
拷贝构造函数： 一个构造函数的第一个参数是自身的引用  且其他额外参数都有默认值   C (const C &, ...)   允许隐式转换
拷贝赋值运算符：		C& operator= (const C &);