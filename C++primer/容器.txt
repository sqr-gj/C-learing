顺序容器： 
vector 可变大小数组     	随机访问		使用较广
array   固定大小数组		随机访问
string  专门用于保存字符	随机访问
deque  双端队列		随机访问
list    双向链表		顺序访问		需要在中间插入删除时使用
forward_list   单向链表	仅单向顺序访问

#include <vector>	using std::vector
类模板	vector<type> v;
1.定义、初始化
vector<T> v;
vector<T> v(v2);
vector<T> v = v2;
vector<T> v(n);
vector<T> v(n, val);
vector<T> v{a, b, c, ...}		//列表初始化
vector<T> v = {a, b, c, ...}
vector<T> v(b, e)		//用迭代器初始化，b、e为迭代器，   左闭右开取值

array使用时还需要指定大小	array<type, size_t>		内置数组（type a[size_t]）不支持拷贝、array支持

容器复制拷贝需要类型匹配

C---代指某容器或其对象
2.迭代器
（指针）以解引用访问元素	除forward_list不支持--操作
c.begin()	c.cbegin()  c.rbegin()	//获取指向容器首尾的迭代器，前缀c为const，r为reverse反向取
c.end()  c.cend()  c.rend()

一些操作：
c.size()			//返回容器大小
c.empty()			//判断c是否为空
c.clear()			//删除c中所有元素  返回void
c.swap(c1)		//交换容器，统一使用非成员版本的swap较好  即swap(c1, c2)
c.resize()			//改变容器大小  第一个参数指定改变后的大小，第二个参数可选，表示新添加元素的初始值

c.assign(b, e)\(n, val)		//用b  e指定范围元素替换c中元素    实现不同类型容器间的数据交换（前提是元素类型相容   char---> string）

容器比较    元素类型应支持比较操作

3.
添加：   vector  string不支持pop\push_front()	除array和forward_list均支持push_back()		push_back\front()提供首尾位置的快速插入，insert()提供任意位置的插入	vector等可以利用insert来在头部插入元素，但随之而来的是效率下降
c.push_back(t)	c.push_front(t)
c.emplace_back(args)     c.emplace_front(args)		emplace利用args创建元素添加到容器中
c.emplace(p, args)	在迭代器p指向的元素之前添加元素t，返回指向新添加元素的迭代器

c.insert()		(p, t)同上
		(p, n, t)在迭代器p指向的元素之前添加n个元素t，返回指向新添加第一个元素的迭代器
		(p, b, e)在迭代器p指向的元素之前添加b e指定范围的元素，返回指向新添加第一个元素的迭代器
		(p, il)在迭代器p指向的元素之前添加il包含的元素，返回指向新添加第一个元素的迭代器   il为花括号包围的元素值列表

删除：  
c.pop_back()	c.pop_front()
c.erase(p)		删除p指定的元素，返回指向被删元素之后元素的迭代器
c.erase(b, e)	删除b, e指定范围的元素，返回指向最后一个被删元素之后元素的迭代器
c.clear()		删除c中的所有元素

访问：
c.front()   c.back()	返回c中首尾元素的引用
c[n]	c.at(n)	返回c中下标为n的元素的引用，当n越界，[] 行为未定义  at() 抛出out_of_range异常

forward_list定义一套独有的添加删除操作
insert_after()
emplace_after()
erase_after()

4.与容量相关  内存
c.capacity()	//c可以保存多少元素
c.reserve(n)	//分配至少容纳n个元素的内存空间
c.shrink_to_fit()	//将capacity()减少为与size()相同大小

适配器	：stack	queue	priority_queue
使某种事物的行为看起来像另外一种事物
实现时可指定底层容器类型	stack  queue默认以deque实现   priority_queue以vector实现
stack<string, vector<string>>  str_stk;

栈stack    先进后出	
pop()   push(t)	推出/压入栈顶
top()		返回栈顶元素  不推出

队列queue  先进先出
pop()     		返回首元素
push()		尾部插入
front()
back()		首尾元素

优先队列priority_queue    （头文件为queue）
top()		返回最高优先级元素  不删除
pop()		推出最高优先级元素   不返回
push()  emplace()    合适位置添加元素

5.其他迭代器	#include <iterator>
插入迭代器: 绑定到某容器，向容器内插入元素	insert(c)	返回与c绑定的对应迭代器
back_inserter	尾后插入
front_inserter	头部插入
inserter		接受第二个参数(迭代器)  指向给定容器，插入到给定迭代器之前

流迭代器：需要指定读写对象类型
istream_iterator	istream_iterator<T> it(cin...)	it绑定到cin...	未初始化表示尾后位置
ostream_iterator	ostream_iterator<T> it(os, (d))  可选参数d表示每写一个值后面输出一个d   it = val;     val写入os	可忽略解引用和递增操作
*it  返回流中的值

反向迭代器：前缀r
rbegin()   rend()

关联容器 ：map   set  multimap  multiset	无序  前缀  unordered_	以哈希存储    unordered_map
#include <map>	#include <set>
#include <unordered_map>	#include <unordered_set>
map	键--值	实现关系的映射			...map<type1, type2>		map元素为pair类型(定义在 #include <utility>)
set	键	便于查找关键字是否在容器内		...set<type>

有序容器的关键字必须定义比较操作

6.pair操作
定义 初始化：
pair<T1, T2> p;
pair<T1, T2> p(v1, v2);
pair<T1, T2> p = {v1, v2};
make_pair(v1, v2);		//返回v1  v2  初始化的pair
p.first   p.second	返回p的第一个   第二个元素

关联容器中关键字不可改变

7.添加  删除元素
c.insert(val)	c.insert(p, val)      //值初始化    p处插入	  若插入的关键字已经在容器内 则不进行任何操作（multi  均插入）	返回pair  指向具有指定关键字的元素及是否插入成功的bool值
c.insert(b, e)	//迭代器进行初始化
c.insert(il)		//列表初始化

c.emplace((p), args)

c.erase(k)		//删除关键字为k的元素     返回size_type  标志删除元素的数量
c.erase(p)		//删除p指向的元素  返回p之后元素的迭代器
c.erase(b, e)	//删除b e 之间的元素   返回e

8.下标操作    map
c[k]		//返回关键字为k的值     k不在c中时添加k  并进行值初始化
c.at(k)		//访问关键字为k的值     k不在时  抛出out_of_range异常 （不添加）

9.元素访问
c.find(k)		//返回指向关键字为k的迭代器    k不在时返回尾后迭代器
c.count(k)		//返回关键字为k的元素的数量		（用来检查元素是否存在c中）		或者用c.find(k) == c.end()

c.lower_bound(k)	//返回指向第一个不小于k的元素的迭代器
c.upper_bound(k)	//返回指向第一个大于k的元素的迭代器

c.equal_range(k)	//返回迭代器pair  表示关键字等于k的元素范围      (k不存在返回<c.end(), c.end()>

无序容器   存储组织上为一组桶		元素存储在一个桶中   每个桶存储一定数量元素   访问时先由哈希函数计算出在哪个桶   再在桶中进行遍历
c.bucket_count()		//正在使用的桶的数目
c.max_bucket_count()	//容器能容纳最多的桶的数量
c.bucket_szie(n)		//第n个桶中有多少元素
c.bucket(k)		//关键字k在哪个桶