1.输入输出
标准库<iostream>	 cin >>   、cout <<。后续有文件流、string流。
2.基本类型
int\float\double\bool\char 等
是否带符号  前置unsigned  (eg...  unsigned int)
3.类型转换
自动转换及强制转换
强制：(int) expr    	int (expr)
显式转换	cast-name<type>(expression)
const_cast	去除const性质(仅改变底层const)	不能改变类型
static_cast	强制转换类型	不能改变const
4.转义字符
换行\n、制表符\t、引号\"......
5.字符串
标准库<string>
6.变量
定义、声明、初始化
列表初始化{a, b, c, ...}
定义变量：int i
声明变量：extern int i	声明不进行初始化
7.命名规范
大驼峰、小驼峰、下划线
8.复合类型
引用  &	（别名？）
指针  *解引用  &取地址		指向指针的指针、指针的引用（无指向引用的指针
9.const限定
指定常量  不可改变
常量引用
常量指针与指向常量的常量指针		*const ptr(常量指针)、const type *const ptr(指向常量的常量指针)
顶层const——表示指针本身是一个常量、底层const——指针所指的对象是一个常量    指针本身是否为常量与所指对象是否为常量是相互独立的
10.constexpr
声明变量为常量表达式
11.类型别名
typedef、using
12.decltype
推断表达式的类型但不使用表达式的值
decltype(f())
decltype((variable))双层括号结果永远是引用

13.命名空间std
using声明    using std::cin   \   using namespace std
14.左值  右值
对象	对象的值
15.运算符
/ 除法  	% 求余
++i与i++
16.条件表达式
cond ? expr1 : expr2	cond为真时，返回expr1，否则返回expr2
17.位运算符
& 位与	^位异或	 | 位或 	~ 位求反
移位    << 左移	>> 右移
18.sizeof
sizeof (type)
sizeof expr	返回表达式或类型所占的字节数
19.switch语句
switch (ch) : {
	case ch1 : 
		...
		break;
	case ch2 :
		...
		break;
	...
	(default :
		...
	)
}
20.goto语句
goto label;	跳转到label语句处
label :
	...
21.异常处理
try 与 throw
try {
	...
}catch( ) {
	...
}
throw 抛出异常
22.static局部静态对象
将局部变量定义位局部静态对象，第一次经过其定义语句时定义，直到程序结束时才销毁	不会因为所在块结束而销毁
23.函数声明定义
声明于头文件，定义于源文件， 	源文件应包含头文件，以验证声明与定义是否匹配
24.参数传递
引用传递与值传递
使用引用避免拷贝、指针
25.
*ptr[10]	含有10个指针的数组
(*ptr)[10]	指向含有10个元素的数组
引用同

26.尾置返回类型
auto func(...) -> int (*)[]	->后接返回类型
27.函数重载
同名不同参	执行的操作相似	（例如对不同类型的参数进行比较等)
28.默认实参
调用时只能忽略尾部的实参	所以默认实参置于右侧
29.内联函数inline
避免函数调用时产生的额外开销		适用于规模较小、频繁调用、流程直接的函数	内联函数通常定义在头文件中
30.预处理器
#include <cassert>	  assert(expr)
预处理器定义的名字：__func__		存放函数名字
		  __FILE__		存放文件名
		  __LINE__		存放当前行号
		  __TIME__		存放编译时间
		  __DATE__	存放编译日期
31.函数指针
声明函数指针时仅用指针代替函数名	
bool lengthCompare(const string &, const string %);
bool (*ptr)(const string &, const string %);
ptr = lengthCompare;
使用指向函数的指针，可以向其他函数传递该指针调用所指向的函数

32.swap	
swap(a, b)			//交换元素	统一使用非成员版本的swap
a.swap(b)		//仅容器还是都可？
除array外  swap对容器仅交换俩容器内部数据结构

33.泛型算法	#include <numeric>
实现一些经典算法的公共接口，可以用来处理不同类型的数据
使用一对迭代器指定操作范围

34.插入迭代器  #include <iterator>
auto iter = back_inserter(c)  		//返回与容器c绑定的插入迭代器
*iter = val;		//val插入到c的末尾

35.谓词		函数？
一元谓词	二元谓词
可调用表达式	返回结果可用作条件
sort(b, e, is_shorter)			//is_shorter为二元谓词	bool is_short(const string &s1, ...s2) { return s1.size() < s2.size();}   按长度排序   自定义比较方式

36.lambda表达式		可以接受多个参数  脱离谓词一元二元限制
[capture list] (parameter list) -> return type { function body}
捕获列表 	       参数列表	     返回类型	函数体
捕获列表：lambda所在函数中定义的局部变量
必须使用尾置返回指定返回类型
参数列表和返回类型可省略		auto f = [] { return val;}	f() 返回val

值捕获  引用捕获	[val]	[&val]
隐式捕获	=指定值捕获	&指定引用捕获
混合隐式显式捕获	[=\&, list]		第一个参数必须为&或=

37.bind函数	#include <functional>
auto new_callable = bind(callable, args_list);
生成新的可调用对象，调用new时，new调用callable，并传入args_list，相当于调用callable(args_list)	args中可能有_1, _n形式的参数，表示传入new的第n个参数
_n定义在placeholders命名空间		使用前声明	using namespace placeholders;
auto g = bind(f, a, b, _1, c, _2);	调用g(i, j) 等价于调用  f(a, b, i, c, j)

38.ref函数		#include <functional>
ref(k)		//返回k的引用
cref(k)		//返回const引用